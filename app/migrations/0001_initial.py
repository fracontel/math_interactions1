# Generated by Django 5.0.6 on 2024-05-30 10:01

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GptCharacter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('role', models.IntegerField()),
                ('notes', models.CharField(max_length=500)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_character',
            },
        ),
        migrations.CreateModel(
            name='GptChat',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('place', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_chat',
            },
        ),
        migrations.CreateModel(
            name='GptDocumentation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('task_type', models.IntegerField()),
                ('content_text', models.TextField(blank=True, null=True)),
                ('file_format', models.CharField(blank=True, max_length=5, null=True)),
                ('file_data', models.BinaryField(blank=True, null=True)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_documentation',
            },
        ),
        migrations.CreateModel(
            name='GptLabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label_type', models.IntegerField()),
                ('label_value1', models.IntegerField()),
                ('label_value2', models.IntegerField()),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_label',
            },
        ),
        migrations.CreateModel(
            name='GptLabelModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model', models.IntegerField(blank=True, null=True)),
                ('label', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gpt_label_model',
            },
        ),
        migrations.CreateModel(
            name='GptLineLabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('line', models.IntegerField(blank=True, null=True)),
                ('label', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gpt_line_label',
            },
        ),
        migrations.CreateModel(
            name='GptModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_type', models.IntegerField()),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('premis', models.IntegerField(blank=True, null=True)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_model',
            },
        ),
        migrations.CreateModel(
            name='GptModelParameters',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
                ('json_data', models.TextField()),
            ],
            options={
                'db_table': 'gpt_model_parameters',
            },
        ),
        migrations.CreateModel(
            name='GptPremis',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
                ('content_text', models.TextField(blank=True, null=True)),
                ('file_format', models.CharField(blank=True, max_length=5, null=True)),
                ('file_data', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gpt_premis',
            },
        ),
        migrations.CreateModel(
            name='GptProblem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('problem_type', models.CharField(max_length=100)),
                ('problem_text', models.TextField()),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_problem',
            },
        ),
        migrations.CreateModel(
            name='GptTask',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('notes', models.CharField(max_length=500)),
                ('task_text', models.TextField()),
                ('task_type', models.IntegerField()),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_task',
            },
        ),
        migrations.CreateModel(
            name='GptCharacterTutor',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.gptcharacter')),
                ('notes', models.CharField(max_length=500)),
                ('affiliation', models.CharField(max_length=100)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_character_tutor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GptCharacterAnalyst',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.gptcharacter')),
                ('notes', models.CharField(max_length=500)),
                ('affiliation', models.CharField(max_length=100)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_character_analyst',
            },
        ),
        migrations.CreateModel(
            name='GptCharacterStudent',
            fields=[
                ('id', models.OneToOneField(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app.gptcharacter')),
                ('age', models.IntegerField()),
                ('school_grade', models.IntegerField()),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'gpt_character_student',
            },
        ),
        migrations.CreateModel(
            name='GptChatModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('model_id', models.IntegerField(blank=True, null=True)),
                ('chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptchat')),
            ],
            options={
                'db_table': 'gpt_chat_model',
            },
        ),
        migrations.CreateModel(
            name='GptLine',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('author', models.CharField(max_length=2)),
                ('content_text', models.TextField(blank=True, null=True)),
                ('file_format', models.CharField(blank=True, max_length=5, null=True)),
                ('file_data', models.BinaryField(blank=True, null=True)),
                ('insert_date', models.DateTimeField()),
                ('edit_date', models.DateTimeField()),
                ('chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptchat')),
            ],
            options={
                'db_table': 'gpt_line',
            },
        ),
        migrations.CreateModel(
            name='GptDocumentationModel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('documentation', models.IntegerField(blank=True, null=True)),
                ('model', models.ForeignKey(blank=True, db_column='model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptmodel')),
            ],
            options={
                'db_table': 'gpt_documentation_model',
            },
        ),
        migrations.AddField(
            model_name='gptmodel',
            name='parameters',
            field=models.ForeignKey(blank=True, db_column='parameters', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptmodelparameters'),
        ),
        migrations.AddField(
            model_name='gptmodel',
            name='problem',
            field=models.ForeignKey(blank=True, db_column='problem', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptproblem'),
        ),
        migrations.AddField(
            model_name='gptchat',
            name='problem',
            field=models.ForeignKey(blank=True, db_column='problem', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptproblem'),
        ),
        migrations.AddField(
            model_name='gptmodel',
            name='task',
            field=models.ForeignKey(blank=True, db_column='task', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gpttask'),
        ),
        migrations.AddField(
            model_name='gptchat',
            name='tutor',
            field=models.ForeignKey(blank=True, db_column='tutor', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptcharactertutor'),
        ),
        migrations.AddField(
            model_name='gptmodel',
            name='analyst',
            field=models.ForeignKey(blank=True, db_column='analyst', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptcharacteranalyst'),
        ),
        migrations.AddField(
            model_name='gptchat',
            name='student',
            field=models.ForeignKey(blank=True, db_column='student', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.gptcharacterstudent'),
        ),
    ]
